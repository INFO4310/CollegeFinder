<html>

<head>
    <!-- importing D3 -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <!-- importing bootstrap -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
    <!-- Importing bootstrap-select -->
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <style>
        body {
            background-color: lightgray;
            margin: 0px;
            padding: 00px;
        }

        #collegeQuiz {
            z-index: -1;
        }

        #collegeQuiz .card-header {
            border: 2px black solid;
            border-radius: 0px;
            margin: 0px;
            padding: 0px;
        }

        #collegeQuiz .btn-link button[aria-expanded=true] {
            color: red;
            font-weight: bold;
        }

        #collegeQuiz h2 button {
            color: #4f47f2;
        }

        #collegeQuiz .btn-link.focus,
        .btn-link:focus,
        .btn-link:hover {
            text-decoration: none;
        }

        #header {
            width: 100%;
            height: auto;
            background-color: #1c1c1c;
            padding: 20px;
            display: flex;
            align-items: center;
            padding-left: 20px;
        }

        #header h1 {
            padding-left: 10px;
            margin: 0px;
            color: white;
            font-size: larger;
            display: flex;
            align-items: center;
        }

        #location-selector {
            max-height: 300px;
            min-height: 300px;
        }

        #logo {
            height: 40px;
            margin: 0;
            display: flex;
        }

        .bootstrap-select {
            z-index: 1;
        }

        #tuition {
            width: 80px;
        }
    </style>
</head>

<body>
    <div id='header'>
        <div id='logo'>
            <img id="logo" src="CollegeCompass.png" alt="CollegeCompassLogo">
            <h1>CollegeCompass: US College Finder</h1>
        </div>
    </div>
    <!-- more information can be found here: https://getbootstrap.com/docs/4.3/components/collapse/ -->
    <div class="row">
        <div class="col">
            <div class="accordion" id="collegeQuiz">
                <!-- Start card for Location -->
                <div class="card">
                    <div class="card-header" id="headingOne">
                        <h2 class="mb-0">
                            <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne"
                                aria-expanded="true" aria-controls="collapseOne">
                                Location
                            </button>
                        </h2>
                    </div>

                    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#collegeQuiz">
                        <div class="card-body" id="location-card">

                            <div id="location-selector">
                                <label for="states">Choose a state:</label></br>

                                <select name="states" id="states" data-size="4" class="selectpicker"
                                    data-actions-box="true" data-live-search="true" onclick=loadCollegeMap() multiple>
                                    <option value="AL">Alabama</option>
                                    <option value="AK">Alaska</option>
                                    <option value="AZ">Arizona</option>
                                    <option value="AR">Arkansas</option>
                                    <option value="CA">California</option>
                                    <option value="CO">Colorado</option>
                                    <option value="CT">Connecticut</option>
                                    <option value="DE">Delaware</option>
                                    <option value="FL">Florida</option>
                                    <option value="GA">Georgia</option>
                                    <option value="HI">Hawaii</option>
                                    <option value="ID">Idaho</option>
                                    <option value="IL">Illinois</option>
                                    <option value="IN">Indiana</option>
                                    <option value="IA">Iowa</option>
                                    <option value="KS">Kansas</option>
                                    <option value="KY">Kentucky</option>
                                    <option value="LA">Louisiana</option>
                                    <option value="ME">Maine</option>
                                    <option value="MD">Maryland</option>
                                    <option value="MA">Massachusetts</option>
                                    <option value="MI">Michigan</option>
                                    <option value="MN">Minnesota</option>
                                    <option value="MS">Mississippi</option>
                                    <option value="MO">Missouri</option>
                                    <option value="MT">Montana</option>
                                    <option value="NE">Nebraska</option>
                                    <option value="NV">Nevada</option>
                                    <option value="NH">New Hamshire</option>
                                    <option value="NJ">New Jersey</option>
                                    <option value="NM">New Mexico</option>
                                    <option value="NY">New York</option>
                                    <option value="NC">North Carolina</option>
                                    <option value="ND">North Dakota</option>
                                    <option value="OH">Ohio</option>
                                    <option value="OK">Oklahoma</option>
                                    <option value="OR">Oregon</option>
                                    <option value="PA">Pennsylvania</option>
                                    <option value="RI">Rhode Island</option>
                                    <option value="SC">South Carolina</option>
                                    <option value="SD">South Dakota</option>
                                    <option value="TN">Tennessee</option>
                                    <option value="TX">Texas</option>
                                    <option value="UT">Utah</option>
                                    <option value="VT">Vermont</option>
                                    <option value="VA">Virginia</option>
                                    <option value="WA">Washington</option>
                                    <option value="WV">West Virginia</option>
                                    <option value="WI">Wisconsin</option>
                                    <option value="WY">Wyoming</option>

                                </select>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- End card for Location -->

                <!-- Start card for Tuition -->
                <div class="card">
                    <div class="card-header" id="headingTwo">
                        <h2 class="mb-0">
                            <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                                data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                Tuition
                            </button>
                        </h2>
                    </div>
                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#collegeQuiz">
                        <div class="card-body">
                            <label for="tuition">Tuition (between $7000 and $80000)</label></br>
                            <i>$</i><input type="number" id="tuition" min="7000" max="80000" name="tuition" step="1000"
                                onclick=loadCollegeMap() value="80000"></br>

                        </div>
                    </div>
                </div>
                <!-- End card for Tuition -->

                <!-- Start card for Size -->
                <div class="card">
                    <div class="card-header" id="headingThree">
                        <h2 class="mb-0">
                            <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                                data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                Size
                            </button>
                        </h2>
                    </div>
                    <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#collegeQuiz">
                        <div class="card-body">
                            <p>Choose a size:</p>
                            <input type="checkbox" id="size1" class="size" name="size" value="100"
                                onclick=loadCollegeMap() checked>
                            <label for="size1">0 - 100 students</label><br>
                            <input type="checkbox" id="size2" class="size" name="size" value="1000"
                                onclick=loadCollegeMap() checked>
                            <label for="size2">100 - 1,000 students</label><br>
                            <input type="checkbox" id="size3" class="size" name="size" value="10000"
                                onclick=loadCollegeMap() checked>
                            <label for="size3">1,000 - 10,000 students</label><br>
                            <input type="checkbox" id="size4" class="size" name="size" value="50000"
                                onclick=loadCollegeMap() checked>
                            <label for="size4">10,000 - 50,000 students</label><br>
                            <input type="checkbox" id="size5" class="size" name="size" value="100000"
                                onclick=loadCollegeMap() checked>
                            <label for="size5">50,000 - 100,000 students</label><br>

                            <br>
                            <!-- <input type="submit" value="Submit"> -->
                        </div>
                    </div>
                </div>
                <!-- End card for Size -->

                <!-- Start card for Test Scores -->
                <div class="card">
                    <div class="card-header" id="headingFour">
                        <h2 class="mb-0">
                            <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                                data-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                                Test Scores
                            </button>
                        </h2>
                    </div>
                    <div id="collapseFour" class="collapse" aria-labelledby="headingFour" data-parent="#collegeQuiz">
                        <div class="card-body">
                            <input type="checkbox" class="test-score" id="SAT_score" name="SAT_score" value="SAT"
                                onchange=loadCollegeMap()>
                            <label for="SAT_score">SAT</label></br>
                            <label for="SAT_score_points">Score (between 0 and 1600):&nbsp</label><label
                                for="SAT_score_points" id="SATNumber">1600</label></br>
                            <input type="range" id="SAT_score_points" name="SAT_score_points" min="0" max="1600"
                                value="1600" onchange=updateSATLabel();loadCollegeMap()></br>
                            <input type="checkbox" class="test-score" id="ACT_score" name="ACT_score" value="ACT"
                                onchange=loadCollegeMap()>
                            <label for="ACT_score">ACT</label></br>
                            <label for="ACT_score_points">Score (between 0 and 36):&nbsp</label><label
                                for="ACT_score_points" id="ACTNumber">36</label></br>
                            <input type="range" id="ACT_score_points" name="ACT_score_points" min="0" max="36" value="36"
                                onchange=updateACTLabel();loadCollegeMap()></br>
                        </div>
                    </div>
                </div>
            </div>
            <!-- End card for Test Scores -->
        </div>
        <!-- Map SVG-->
        <div class="col">
            <svg id="map" width="800" height="500"></svg>
        </div>
    </div>
    <script>
        //map attributes
        const mapsvg = d3.select("#map");
        const width = mapsvg.attr("width");
        const height = mapsvg.attr("height");
        const margin = { top: 50, right: 50, bottom: 20, left: 20 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;
        const map = mapsvg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .attr("id", "map");
        ////////////////////////////data manipulation/////////////////////////
        const drawMap = async () => {

            //     const data = await d3.csv('MERGED2018_19_PP.csv');

            //     var newData = data.map((d) => {
            //         return {
            //             name: d.INSTNM,
            //             lat: d.LATITUDE,
            //             lon: d.LONGITUDE,
            //             state: d.STABBR,
            //             tuition: d.COSTT4_A,
            //             SAT: d.SAT_AVG,
            //             ACT: d.ACTCMMID,
            //             //admissions: d.ADM_RATE,
            //             size: d.UGDS
            //         };
            //     });

            //     newData = newData.filter(d=> {
            //         return d.name != "" && d.lat != "NULL" && d.lon != "NULL" && d.location != [NaN, NaN] 
            //         && d.tuition != "NULL" && d['SAT'] != "NULL" && d['ACT']!= "NULL";
            //     });

            //     newData.forEach( (d, i) => {
            //         d.location = [Number(d.lon), Number(d.lat)];
            //         d['SAT']=Number(d['SAT']);
            //         d['ACT']=Number(d['ACT']);
            //         d.tuition = Number(d.tuition);
            //         // d.admissions = Number(d.admissions);
            //     });


            //     // // console.log(newData);
            //     console.log(JSON.stringify(newData))

            //////////////////////////////calling filtered data ////////////////////////


            //load data
            var us = await d3.json("../static/us.json");

            //topographic features
            var states = topojson.feature(us, us.objects.states);
            var statesMesh = topojson.mesh(us, us.objects.states);
            var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);
            var path = d3.geoPath().projection(projection);

            //draw states and outlines
            map.selectAll("path.state").data(states.features)
                .join("path")
                .attr("class", "state")
                .attr("note", d => d.id)
                .attr("d", path)
                .attr("fill", "#1c1c1c")
                .attr("stroke", "1c1c1c")
                .attr("stroke-width", 1);

            var location = mapsvg.append("g")
                .attr("class", "location")
                .attr("fill", "lightgray");

            map.append("path").datum(statesMesh)
                .attr("class", "outline")
                .attr("d", path)
                .attr("fill", "#1c1c1c")
                .attr("stroke", "white")
                .attr("stroke-width", 1);

            let infoWidth = 150;
            let infoHeight = 50;

            let infoBox = mapsvg.append("g")
                .attr("id", "infoBox")
                .attr("visibility", "hidden")
                .attr("width", infoWidth)
                .attr("height", infoHeight)
            infoBox.append("rect")
                .attr("fill", "black")
                .attr("opacity", 0.9)
                .attr("width", infoWidth)
                .attr("height", infoHeight)

            infoBox.append("text")
                .attr("class", "text")
                .attr("id", "collegeName")
                .attr("fill", "white")
                .attr("x", 8)
                .attr("y", 16)
                .attr("font-size", 12)
                .attr("text-anchor", "start")
                .attr("alignment-baseline", "text-before-edge")
                .attr("font-weight", "bold");
        }
        drawMap()
        //redraw map everytime input is changed
        const loadCollegeMap = async () => {

            //get values for input slider: tuition
            // fees = []
            // allData.forEach((d,i) => {
            //     fees.push(d.tuition)
            // })
            // console.log(fees)
            // range = d3.extent(fees)
            // console.log("minmax: " + range)



            var allData = await d3.json('filteredCollegeData.json');

            //get states
            var state = d3.select('#states').property("value");
            //TO DO: need to change this to a forEach loop
            //TO DO: get state
            // newData = allData.filter((d) => {
            //     return (d.state = state)
            // })


            var tuition = d3.select('#tuition').property("value")
            d3.select('#tuitionNumber').text("$" + formatNumber(tuition))

            //get sizes
            var sizes = [];
            var checkedSize = d3.selectAll("input.size:checked")._groups[0];
            checkedSize.forEach((d) => {
                if (Number(d.value) == 100) {
                    sizes.push([0,100])
                } else if (Number(d.value) == 1000) {
                    sizes.push([100,1000])
                }else if (Number(d.value) == 10000) {
                    sizes.push([1000,10000])
                }else if (Number(d.value) == 50000) {
                    sizes.push([10000,50000])
                }else if (Number(d.value) == 100000) {
                    sizes.push([50000,100000])
                }
            });
            //get test scores
            var [SATVal, ACTVal] = clickTestScore();

            console.log(state, tuition, sizes, SATVal, ACTVal)

            //call UpdateData
            UpdateData(allData, state, tuition, sizes, SATVal, ACTVal)
        }

        loadCollegeMap();

        //helper functions!
        function UpdateData(allData, state, tuition, sizes, SATVal, ACTVal) {
            var newData = allData.filter((d) => {
                return (d.tuition <= tuition)
            })

            if (SATVal != null) {
            var newData = newData.filter((d) => {
                return (d.SAT <= SATVal)
                })
                return (newData)
            }

            if (ACTVal != null) {
            var newData = newData.filter((d) => {
                return (d.SAT <= SATVal)
                })
                return (newData)
            }

            console.log("newData length: " + newData.length)

            drawCircles(newData)
        }

        //present number with comma
        function formatNumber(num) {
            format = d3.format(",");
            return (format(num))
        }

        //choose Test Scoring Type
        function clickTestScore() {
            SATVal = null;
            ACTVal = null;

            var checkedTest = d3.selectAll('input.test-score:checked')._groups[0];
            checkedTest.forEach((d) => {
                if (d.value == "SAT") {
                    var SATVal = d3.select('#SAT_score_points').property("value")
                } else if (d.value == "ACT") {
                    var ACTVal = d3.select('#ACT_score_points').property("value")
                }
            });
            return [SATVal, ACTVal]
        }
        function updateSATLabel() {
            var SATVal = d3.select('#SAT_score_points').property("value")
            d3.select('#SATNumber').text(SATVal)
        }

        function updateACTLabel() {
            var ACTVal = d3.select('#ACT_score_points').property("value")
            console.log(ACTVal)
            d3.select('#ACTNumber').text(ACTVal)
        }

        const drawCircles = async (newData) => {
            var us = await d3.json("../static/us.json");
            var states = topojson.feature(us, us.objects.states);
            var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);

            let circle = map.selectAll("circle").data(newData)
                .join("circle")
                .attr("id", d => d.name)
                .attr("cx", d => projection(d.location)[0])
                .attr("cy", d => projection(d.location)[1])
                .attr("r", 4)
                .attr("fill", "#9b3080")
                .style("opacity", .7);

            //modified Mike Bostock's code for wrapping long labels: https://bl.ocks.org/mbostock/7555321
            function wrap(text, width) {
                text.each(function () {
                    var text = d3.select(this),
                        words = text.text().split(/\s+/).reverse(), word, line = [],
                        lineNumber = 0, lineHeight = 1.1,
                        x = text.attr("x"), y = text.attr("y"),
                        dy = 0,
                        tspan = text.text(null)
                            .append("tspan")
                            .attr("x", x)
                            .attr("y", y)
                            .attr("dy", dy + "em");
                    while (word = words.pop()) {
                        line.push(word);
                        tspan.text(line.join(" "));
                        if (tspan.node().getComputedTextLength() > width) {
                            line.pop();
                            tspan.text(line.join(" "));
                            line = [word];
                            tspan = text.append("tspan")
                                .attr("x", x)
                                .attr("y", y)
                                .attr("dy", ++lineNumber * lineHeight + dy + "em")
                                .text(word);
                        }
                    }
                });
            }

            circle.on("mouseover", function () {
                let college = d3.select(this);
                var coordinates = d3.mouse(this);

                college.transition().duration(200);

                d3.select("#infoBox").attr("visibility", "visible")
                    .attr("transform", "translate(" + (coordinates[0] - 10) + "," + (coordinates[1]) + ")");

                d3.select("#collegeName").text(college.datum().name)
                    .call(wrap, 140);
            })

            circle.on("mouseout", function () {
                let college = d3.select(this);
                var coordinates = d3.mouse(this);

                college.transition().duration(200);

                d3.select("#infoBox").attr("visibility", "hidden");
                d3.select("#collegeName").text("");
            })
        }

    </script>
</body>

</html>