<html>

<head>
    <!-- importing D3 -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <!-- importing bootstrap -->
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
    <!-- Importing bootstrap-select -->
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <style>
        body {
            background-color: lightgray;
            margin: 0px;
            padding: 00px;
        }

        #collegeQuiz {
            z-index: -1;
        }

        #collegeQuiz .card-header {
            border: 2px black solid;
            border-radius: 0px;
            margin: 0px;
            padding: 0px;
        }

        #collegeQuiz .btn-link button[aria-expanded=true] {
            color: red;
            font-weight: bold;
        }

        #collegeQuiz h2 button {
            color: #4f47f2;
            text-align: left;
        }

        #collegeQuiz .btn-link.focus,
        .btn-link:focus,
        .btn-link:hover {
            text-decoration: none;
        }

        #header {
            width: 100%;
            height: auto;
            background-color: #1c1c1c;
            padding: 20px;
            display: flex;
            align-items: center;
            padding-left: 20px;
        }

        #header h1 {
            padding-left: 10px;
            margin: 0px;
            color: white;
            font-size: larger;
            display: flex;
            align-items: center;
        }

        #location-selector {
            max-height: 300px;
            min-height: 300px;
        }

        #logo {
            height: 40px;
            margin: 0;
            display: flex;
        }

        .bootstrap-select {
            z-index: 1;
        }

        #tuition {
            width: 80px;
        }
    </style>
</head>

<body>
    <div id='header'>
        <div id='logo'>
            <img id="logo" src="CollegeCompass.png" alt="CollegeCompassLogo">
            <h1>CollegeCompass: US College Finder</h1>
        </div>
    </div>
    <!-- more information can be found here: https://getbootstrap.com/docs/4.3/components/collapse/ -->
    <div class="row">
        <div class="col col-md-4 col-sm-12">
            <div class="accordion" id="collegeQuiz">
                <!-- Start card for Location -->
                <div class="card">
                    <div class="card-header" id="headingOne">
                        <h2 class="mb-0">
                            <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne"
                                aria-expanded="true" aria-controls="collapseOne" id="location-btn">
                                Location
                            </button>
                        </h2>
                    </div>

                    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#collegeQuiz">
                        <div class="card-body" id="location-card">

                            <div id="location-selector">
                                <label for="states">Choose a state:</label></br>

                                <select name="states" id="states" data-size="4" class="selectpicker"
                                    data-actions-box="true" data-live-search="true" onchange=loadCollegeMap() multiple>
                                    <option value="AL" selected>Alabama</option>
                                    <option value="AK" selected>Alaska</option>
                                    <option value="AZ" selected>Arizona</option>
                                    <option value="AR" selected>Arkansas</option>
                                    <option value="CA" selected>California</option>
                                    <option value="CO" selected>Colorado</option>
                                    <option value="CT" selected>Connecticut</option>
                                    <option value="DE" selected>Delaware</option>
                                    <option value="FL" selected>Florida</option>
                                    <option value="GA" selected>Georgia</option>
                                    <option value="HI" selected>Hawaii</option>
                                    <option value="ID" selected>Idaho</option>
                                    <option value="IL" selected>Illinois</option>
                                    <option value="IN" selected>Indiana</option>
                                    <option value="IA" selected>Iowa</option>
                                    <option value="KS" selected>Kansas</option>
                                    <option value="KY" selected>Kentucky</option>
                                    <option value="LA" selected>Louisiana</option>
                                    <option value="ME" selected>Maine</option>
                                    <option value="MD" selected>Maryland</option>
                                    <option value="MA" selected>Massachusetts</option>
                                    <option value="MI" selected>Michigan</option>
                                    <option value="MN" selected>Minnesota</option>
                                    <option value="MS" selected>Mississippi</option>
                                    <option value="MO" selected>Missouri</option>
                                    <option value="MT" selected>Montana</option>
                                    <option value="NE" selected>Nebraska</option>
                                    <option value="NV" selected>Nevada</option>
                                    <option value="NH" selected>New Hamshire</option>
                                    <option value="NJ" selected>New Jersey</option>
                                    <option value="NM" selected>New Mexico</option>
                                    <option value="NY" selected>New York</option>
                                    <option value="NC" selected>North Carolina</option>
                                    <option value="ND" selected>North Dakota</option>
                                    <option value="OH" selected>Ohio</option>
                                    <option value="OK" selected>Oklahoma</option>
                                    <option value="OR" selected>Oregon</option>
                                    <option value="PA" selected>Pennsylvania</option>
                                    <option value="RI" selected>Rhode Island</option>
                                    <option value="SC" selected>South Carolina</option>
                                    <option value="SD" selected>South Dakota</option>
                                    <option value="TN" selected>Tennessee</option>
                                    <option value="TX" selected>Texas</option>
                                    <option value="UT" selected>Utah</option>
                                    <option value="VT" selected>Vermont</option>
                                    <option value="VA" selected>Virginia</option>
                                    <option value="WA" selected>Washington</option>
                                    <option value="WV" selected>West Virginia</option>
                                    <option value="WI" selected>Wisconsin</option>
                                    <option value="WY" selected>Wyoming</option>

                                </select>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- End card for Location -->

                <!-- Start card for Tuition -->
                <div class="card">
                    <div class="card-header" id="headingTwo">
                        <h2 class="mb-0">
                            <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                                data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo"
                                id="tuition-btn">
                                Tuition
                            </button>
                        </h2>
                    </div>
                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#collegeQuiz">
                        <div class="card-body">
                            <label for="tuition">Tuition (between $7000 and $80000)</label></br>
                            <i>$</i><input type="number" id="tuition" min="7000" max="80000" name="tuition" step="1000"
                                onclick=loadCollegeMap() value="80000"></br>

                        </div>
                    </div>
                </div>
                <!-- End card for Tuition -->

                <!-- Start card for Size -->
                <div class="card">
                    <div class="card-header" id="headingThree">
                        <h2 class="mb-0">
                            <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                                data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree"
                                id="size-btn">
                                Size
                            </button>
                        </h2>
                    </div>
                    <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#collegeQuiz">
                        <div class="card-body">
                            <p>Choose a size:</p>
                            <input type="checkbox" id="size1" class="size" name="size" value="100"
                                onclick=loadCollegeMap() checked>
                            <label for="size1">0 - 100 students</label><br>
                            <input type="checkbox" id="size2" class="size" name="size" value="1000"
                                onclick=loadCollegeMap() checked>
                            <label for="size2">100 - 1,000 students</label><br>
                            <input type="checkbox" id="size3" class="size" name="size" value="10000"
                                onclick=loadCollegeMap() checked>
                            <label for="size3">1,000 - 10,000 students</label><br>
                            <input type="checkbox" id="size4" class="size" name="size" value="50000"
                                onclick=loadCollegeMap() checked>
                            <label for="size4">10,000 - 50,000 students</label><br>
                            <input type="checkbox" id="size5" class="size" name="size" value="100000"
                                onclick=loadCollegeMap() checked>
                            <label for="size5">50,000 - 100,000 students</label><br>

                            <br>
                            <!-- <input type="submit" value="Submit"> -->
                        </div>
                    </div>
                </div>
                <!-- End card for Size -->

                <!-- Start card for Test Scores -->
                <div class="card">
                    <div class="card-header" id="headingFour">
                        <h2 class="mb-0">
                            <button class="btn btn-link collapsed" type="button" data-toggle="collapse"
                                data-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour"
                                id="test-btn">
                                Test Scores
                            </button>
                        </h2>
                    </div>
                    <div id="collapseFour" class="collapse" aria-labelledby="headingFour" data-parent="#collegeQuiz">
                        <div class="card-body">
                            <input type="checkbox" class="test-score" id="SAT_score" name="SAT_score" value="SAT"
                                onchange=enableSAT();loadCollegeMap() checked>
                            <label for="SAT_score">SAT</label></br>
                            <label for="SAT_score_points">Score (between 0 and 1600):&nbsp</label><label
                                for="SAT_score_points" id="SATNumber">1600</label></br>
                            <input type="number" id="SAT_score_points" name="SAT_score_points" min="0" max="1600"
                                value="1600" onchange=updateSATLabel();loadCollegeMap()></br>
                            <input type="checkbox" class="test-score" id="ACT_score" name="ACT_score" value="ACT"
                                onchange=enableACT();loadCollegeMap() checked>
                            <label for="ACT_score">ACT</label></br>
                            <label for="ACT_score_points">Score (between 0 and 36):&nbsp</label><label
                                for="ACT_score_points" id="ACTNumber">36</label></br>
                            <input type="number" id="ACT_score_points" name="ACT_score_points" min="0" max="36"
                                value="36" onchange=updateACTLabel();loadCollegeMap()></br>
                        </div>
                    </div>
                </div>
            </div>
            <!-- End card for Test Scores -->
        </div>
        <!-- Map SVG-->
        <div class="col col-md-8 col-sm-12">
            <svg id="map" width="800" height="500"></svg>
        </div>
    </div>
    <script>
        ////////////////////////////ESTABLISHING GLOBALLY USED VARIABLEs/////////////////////////

        //map attributes
        const mapsvg = d3.select("#map");
        const width = mapsvg.attr("width");
        const height = mapsvg.attr("height");
        const margin = { top: 50, right: 50, bottom: 20, left: 20 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;
        const map = mapsvg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .attr("id", "map");
        const g=map.append("g");

        ////////////////////////////initial data manipulation/////////////////////////
        //     const data = await d3.csv('MERGED2018_19_PP.csv');

        //     var newData = data.map((d) => {
        //         return {
        //             name: d.INSTNM,
        //             lat: d.LATITUDE,
        //             lon: d.LONGITUDE,
        //             state: d.STABBR,
        //             tuition: d.COSTT4_A,
        //             SAT: d.SAT_AVG,
        //             ACT: d.ACTCMMID,
        //             //admissions: d.ADM_RATE,
        //             size: d.UGDS
        //         };
        //     });

        //     newData = newData.filter(d=> {
        //         return d.name != "" && d.lat != "NULL" && d.lon != "NULL" && d.location != [NaN, NaN] 
        //         && d.tuition != "NULL" && d['SAT'] != "NULL" && d['ACT']!= "NULL";
        //     });

        //     newData.forEach( (d, i) => {
        //         d.location = [Number(d.lon), Number(d.lat)];
        //         d['SAT']=Number(d['SAT']);
        //         d['ACT']=Number(d['ACT']);
        //         d.tuition = Number(d.tuition);
        //         // d.admissions = Number(d.admissions);
        //     });

        //get values for input slider: tuition
        // fees = []
        // allData.forEach((d,i) => {
        //     fees.push(d.tuition)
        // })
        // console.log(fees)
        // range = d3.extent(fees)
        // console.log("minmax: " + range)
        //     // // console.log(newData);
        //     console.log(JSON.stringify(newData))

        //////////////////////////////DRAW MAP BACKGROUND///////////////////////////////
        //load data
        const drawMap = async () => {
            var us = await d3.json("../static/us.json");

            var zoom = d3.zoom()
                .scaleExtent([1, 8])
                .on("zoom", zoomed);

            var active = d3.select(null);
            map.on("click", stopped, true);
            
            map.call(zoom)

            //topographic features
            var states = topojson.feature(us, us.objects.states);
            var statesMesh = topojson.mesh(us, us.objects.states);
            var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);
            var path = d3.geoPath().projection(projection);

            //draw states and outlines
            g.selectAll("path.state").data(states.features)
                .join("path")
                .attr("class", "state")
                .attr("note", d => d.id)
                .attr("d", path)
                .attr("fill", "#1c1c1c")
                .attr("stroke", "1c1c1c")
                .attr("stroke-width", 1)
                .on("click", clicked);

            g.append("path").datum(statesMesh)
                .attr("class", "outline")
                .attr("d", path)
                .attr("fill", "#1c1c1c")
                .attr("stroke", "white")
                .attr("stroke-width", 1);

            let infoWidth = 150;
            let infoHeight = 50;

            let infoBox = mapsvg.append("g")
                .attr("id", "infoBox")
                .attr("visibility", "hidden")
                .attr("width", infoWidth)
                .attr("height", infoHeight)
            infoBox.append("rect")
                .attr("fill", "black")
                .attr("opacity", 0.9)
                .attr("width", infoWidth)
                .attr("height", infoHeight)

            infoBox.append("text")
                .attr("class", "text")
                .attr("id", "collegeName")
                .attr("fill", "white")
                .attr("x", 8)
                .attr("y", 16)
                .attr("font-size", 12)
                .attr("text-anchor", "start")
                .attr("alignment-baseline", "text-before-edge")
                .attr("font-weight", "bold");
        
            //modified from https://bl.ocks.org/iamkevinv/0a24e9126cd2fa6b283c6f2d774b69a2
            function clicked(d) {
                if (active.node() === this) return reset();
                active.classed("active", false);
                active = d3.select(this).classed("active", true);

                var bounds = path.bounds(d),
                    dx = bounds[1][0] - bounds[0][0],
                    dy = bounds[1][1] - bounds[0][1],
                    x = (bounds[0][0] + bounds[1][0]) / 2,
                    y = (bounds[0][1] + bounds[1][1]) / 2,
                    scale = .9 / Math.max(dx / width, dy / height),
                    translate = [width / 2 - scale * x, height / 2 - scale * y];


                g.transition()
                    .duration(750)
                    .call( zoom.transform, d3.zoomIdentity.translate(translate[0],translate[1]).scale(scale) ); 
            }

            function reset() {
                active.classed("active", false);
                active = d3.select(null);

                g.transition()
                    .duration(750)
                    .call( zoom.transform, d3.zoomIdentity );
            }

            function zoomed() {
                g.style("stroke-width", 1.5 / d3.event.transform.k + "px");
                g.attr("transform", d3.event.transform); 
            }
            function stopped() {
                if (d3.event.defaultPrevented) d3.event.stopPropagation();
            }
        }
        drawMap()


        ////////////////////////////////////GET ALL INPUT VALUES AND CALL HELPER FUNCTIONS/////////////////////////////////////
        const loadCollegeMap = async () => {
            var allData = await d3.json('filteredCollegeData.json');

            //get states
            let states = new Set()
            let statesArr = [];
            var selectedStates = d3.select('#states')
                .selectAll("option")
                .filter(function (d, i) {
                    return this.selected;
                });
            selectedStates._groups[0].forEach((d, i) => {
                states.add(d.value)
                statesArr.push(" " + d.text)
            })
            if (statesArr.length >= 20) {
                d3.select("#location-btn").text("Location: 20+ States")
            } else {
                d3.select("#location-btn").text("Location: " + statesArr)
            }

            //get tuition
            var tuition = d3.select('#tuition').property("value")
            d3.select('#tuitionNumber').text("$" + formatNumber(tuition))
            d3.select("#tuition-btn").text("Tuition: $" + formatNumber(tuition))

            //get sizes
            var sizes = [];
            var sizeLbl = [];
            var checkedSize = d3.selectAll("input.size:checked")._groups[0];
            checkedSize.forEach((d) => {
                if (Number(d.value) == 100) {
                    sizes.push([0, 100])
                    sizeLbl.push("0-100")
                } else if (Number(d.value) == 1000) {
                    sizes.push([100, 1000])
                    sizeLbl.push("100-1000")
                } else if (Number(d.value) == 10000) {
                    sizes.push([1000, 10000])
                    sizeLbl.push("1000-10000")
                } else if (Number(d.value) == 50000) {
                    sizes.push([10000, 50000])
                    sizeLbl.push("10000-50000")
                } else if (Number(d.value) == 100000) {
                    sizes.push([50000, 100000])
                    sizeLbl.push("50000-100000")
                }
            });

            d3.select('#size-btn').text("Number of Students: " + sizeLbl.join(', '))

            //get test scores
            var [SATVal, ACTVal] = clickTestScore();

            console.log(states, tuition, sizes, SATVal, ACTVal)

            //call UpdateData
            UpdateData(allData, states, tuition, sizes, SATVal, ACTVal)
        }

        loadCollegeMap();

        ////////////////////////////////////FILTER ALL DATA GIVEN INPUTS/////////////////////////////////////
        //filter data given all inputs
        function UpdateData(allData, states, tuition, sizes, SATVal, ACTVal) {
            var newData = allData.filter((d) => {
                return (d.tuition <= tuition &&
                    states.has(d.state))
            })
            sizedData = [];
            sizes.forEach((d) => {
                let filtered = newData.filter(e => { return e.size >= d[0] && e.size <= d[1] });
                sizedData.push(filtered)
            })
            newData = sizedData.flat();

            if (SATVal != null && ACTVal != null) {
                d3.select('#test-btn').text("Test Scores: SAT(" + SATVal + "), ACT(" + ACTVal + ")")
                var newData = newData.filter((d) => {
                    return (d.SAT <= SATVal || d.ACT <= ACTVal)
                })
            } else if (SATVal != null && ACTVal == null) {
                d3.select('#test-btn').text("Test Scores: SAT(" + SATVal + ")")
                var newData = newData.filter((d) => {
                    return (d.SAT <= SATVal)
                })
            } else if (SATVal == null && ACTVal != null) {
                d3.select('#test-btn').text("Test Scores: ACT(" + ACTVal + ")")
                var newData = newData.filter((d) => {
                    return (d.ACT <= ACTVal)
                })
            }

            drawCircles(newData)
        }

        ////////////////////////////////////REDRAW CIRCLES WITH NEW FILTERED DATA/////////////////////////////////////
        const drawCircles = async (newData) => {
            var us = await d3.json("../static/us.json");
            var states = topojson.feature(us, us.objects.states);
            var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);

            let circle = g.selectAll("circle").data(newData)
                .join("circle")
                .attr("id", d => d.name)
                .attr("cx", d => projection(d.location)[0])
                .attr("cy", d => projection(d.location)[1])
                .attr("r", 4)
                .attr("fill", "#9b3080")
                .style("opacity", .7);

            //modified Mike Bostock's code for wrapping long labels: https://bl.ocks.org/mbostock/7555321
            function wrap(text, width) {
                text.each(function () {
                    var text = d3.select(this),
                        words = text.text().split(/\s+/).reverse(), word, line = [],
                        lineNumber = 0, lineHeight = 1.1,
                        x = text.attr("x"), y = text.attr("y"),
                        dy = 0,
                        tspan = text.text(null)
                            .append("tspan")
                            .attr("x", x)
                            .attr("y", y)
                            .attr("dy", dy + "em");
                    while (word = words.pop()) {
                        line.push(word);
                        tspan.text(line.join(" "));
                        if (tspan.node().getComputedTextLength() > width) {
                            line.pop();
                            tspan.text(line.join(" "));
                            line = [word];
                            tspan = text.append("tspan")
                                .attr("x", x)
                                .attr("y", y)
                                .attr("dy", ++lineNumber * lineHeight + dy + "em")
                                .text(word);
                        }
                    }
                });
            }

            circle.on("mouseover", function () {
                let college = d3.select(this);
                var coordinates = d3.mouse(this);

                college.transition().duration(200);

                d3.select("#infoBox").attr("visibility", "visible")
                    .attr("transform", "translate(" + (coordinates[0] - 10) + "," + (coordinates[1]) + ")");

                d3.select("#collegeName").text(college.datum().name)
                    .call(wrap, 100);
            })

            circle.on("mouseout", function () {
                let college = d3.select(this);
                var coordinates = d3.mouse(this);

                college.transition().duration(200);

                d3.select("#infoBox").attr("visibility", "hidden");
                d3.select("#collegeName").text("");
            })
        }

        ////////////////////////////////////HELPER FUNCTIONS/////////////////////////////////////
        //present number with comma
        function formatNumber(num) {
            format = d3.format(",");
            return (format(num))
        }

        //choose Test Scoring Type
        function clickTestScore() {
            var SATVal = null;
            var ACTVal = null;

            var checkedTest = d3.selectAll('input.test-score:checked')._groups[0];
            checkedTest.forEach((d) => {
                console.log("should be either SAT or ACT " + d.value)
                if (d.value == "SAT") {
                    SATVal = Number(d3.select('#SAT_score_points').property("value"))
                } else if (d.value == "ACT") {
                    ACTVal = Number(d3.select('#ACT_score_points').property("value"))
                }
            });
            return [SATVal, ACTVal]
        }

        function updateSATLabel() {
            var SATVal = d3.select('#SAT_score_points').property("value")
            d3.select('#SATNumber').text(SATVal)
        }

        function updateACTLabel() {
            var ACTVal = d3.select('#ACT_score_points').property("value")
            d3.select('#ACTNumber').text(ACTVal)
        }

        function enableSAT() {
            SATcheck = d3.select("input#SAT_score")._groups[0][0];
            ACTcheck = d3.select("input#ACT_score")._groups[0][0];
            SATslider = d3.select("input#SAT_score_points")
            if (SATcheck.checked) {
                SATslider.attr('disabled', null)
            } else if (!SATcheck.checked && ACTcheck.checked) {
                SATslider.attr('disabled', true)
            } else if (!SATcheck.checked && !ACTcheck.checked) {
                SATcheck.checked = true;
                SATslider.attr('disabled', null)
            }
        }

        function enableACT() {
            ACTcheck = d3.select("input#ACT_score")._groups[0][0];
            SATcheck = d3.select("input#SAT_score")._groups[0][0];
            ACTslider = d3.select("input#ACT_score_points")
            if (ACTcheck.checked) {
                ACTslider.attr('disabled', null)
            } else if (!ACTcheck.checked && SATcheck.checked) {
                ACTslider.attr('disabled', true)
            } else if (!ACTcheck.checked && !SATcheck.checked) {
                ACTcheck.checked = true;
                ACTslider.attr('disabled', null)
            }
        }

    </script>
</body>

</html>